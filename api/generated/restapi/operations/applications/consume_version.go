// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ConsumeVersionHandlerFunc turns a function with the right signature into a consume version handler
type ConsumeVersionHandlerFunc func(ConsumeVersionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConsumeVersionHandlerFunc) Handle(params ConsumeVersionParams) middleware.Responder {
	return fn(params)
}

// ConsumeVersionHandler interface for that can handle valid consume version params
type ConsumeVersionHandler interface {
	Handle(ConsumeVersionParams) middleware.Responder
}

// NewConsumeVersion creates a new http.Handler for the consume version operation
func NewConsumeVersion(ctx *middleware.Context, handler ConsumeVersionHandler) *ConsumeVersion {
	return &ConsumeVersion{Context: ctx, Handler: handler}
}

/* ConsumeVersion swagger:route PUT /applications/{applicationId} Applications consumeVersion

Increment and Return Version

*/
type ConsumeVersion struct {
	Context *middleware.Context
	Handler ConsumeVersionHandler
}

func (o *ConsumeVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewConsumeVersionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
